from GUI import Ui_MainWindow #Generated by Qt Designer
from PyQt4 import QtCore, QtGui

import serial
import time
import math
import Holding_Registers
import minimalmodbus

class StartQT4(QtGui.QMainWindow):
    instrument = minimalmodbus

    def __init__(self, parent=None):
        QtGui.QWidget.__init__(self, parent)
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)		  
        ##################Buttons#######################################################################
        self.ui.pushButton_1.clicked.connect(self.emergency_stop)
        self.ui.pushButton_2.clicked.connect(self.X_Plus)
        self.ui.pushButton_3.clicked.connect(self.X_Minus)
        self.ui.pushButton_4.clicked.connect(self.Y_Plus)
        self.ui.pushButton_5.clicked.connect(self.Y_Minus)
        self.ui.pushButton_10.clicked.connect(self.Z_Plus)
        self.ui.pushButton_11.clicked.connect(self.Z_Minus)
        self.ui.pushButton_12.clicked.connect(self.connect)
        self.ui.pushButton_13.clicked.connect(self.disconnect)
        self.ui.pushButton_14.clicked.connect(self.HomeAll_Coordinate)
        self.ui.pushButton_15.clicked.connect(self.HomeAll_Length)
        self.ui.pushButton_18.clicked.connect(self.WinchA_Extrude)
        self.ui.pushButton_19.clicked.connect(self.WinchA_Retract)
        self.ui.pushButton_20.clicked.connect(self.WinchB_Extrude)
        self.ui.pushButton_21.clicked.connect(self.WinchB_Retract)
        self.ui.pushButton_22.clicked.connect(self.WinchC_Extrude)
        self.ui.pushButton_23.clicked.connect(self.WinchC_Retract)
        self.ui.pushButton_24.clicked.connect(self.WinchD_Extrude)
        self.ui.pushButton_25.clicked.connect(self.WinchD_Retract)
        self.ui.pushButton_26.clicked.connect(self.WinchA_Zero)
        self.ui.pushButton_27.clicked.connect(self.WinchB_Zero)
        self.ui.pushButton_28.clicked.connect(self.WinchC_Zero)
        self.ui.pushButton_29.clicked.connect(self.WinchD_Zero)
        self.ui.pushButton_30.clicked.connect(self.WinchB_ReadMonitor1)
        self.ui.pushButton_31.clicked.connect(self.WinchA_ReadMonitor1)
        self.ui.pushButton_32.clicked.connect(self.WinchA_Goto)
        self.ui.pushButton_33.clicked.connect(self.WinchA_Read_PID)
        self.ui.pushButton_34.clicked.connect(self.Waypoint_Goto)
        self.ui.pushButton_35.clicked.connect(self.WinchA_Reset)
        self.ui.pushButton_36.clicked.connect(self.WinchB_Goto)
        self.ui.pushButton_37.clicked.connect(self.WinchB_Read_PID)
        self.ui.pushButton_38.clicked.connect(self.WinchB_Reset)
        self.ui.pushButton_39.clicked.connect(self.WinchC_Goto)
        self.ui.pushButton_40.clicked.connect(self.WinchC_Read_PID)
        self.ui.pushButton_41.clicked.connect(self.WinchC_Reset)
        self.ui.pushButton_42.clicked.connect(self.WinchD_Goto)
        self.ui.pushButton_43.clicked.connect(self.WinchD_Read_PID)
        self.ui.pushButton_44.clicked.connect(self.Read_Target_Length)
        self.ui.pushButton_45.clicked.connect(self.Read_Target_Coordinate)
        self.ui.pushButton_46.clicked.connect(self.WinchD_Reset)
        self.ui.pushButton_47.clicked.connect(self.WinchA_Write_PID)
        self.ui.pushButton_48.clicked.connect(self.WinchB_Write_PID) 
        self.ui.pushButton_49.clicked.connect(self.WinchC_Write_PID) 
        self.ui.pushButton_50.clicked.connect(self.WinchD_Write_PID) 
        self.ui.pushButton_51.clicked.connect(self.WinchC_ReadMonitor1)
        self.ui.pushButton_52.clicked.connect(self.Write_Field_Settings)
        self.ui.pushButton_53.clicked.connect(self.Write_Motion_Settings)
        self.ui.pushButton_54.clicked.connect(self.WinchD_ReadMonitor1)
        ##################Buttons#######################################################################

    def connect(self, text):
        try:
            self.instrument = minimalmodbus.Instrument(str(self.ui.lineEdit.text()), 1) 
            self.instrument.serial.baudrate = 9600   # Baudrate
            self.instrument.serial.bytesize = 8
            self.instrument.serial.parity   = serial.PARITY_NONE
            self.instrument.serial.stopbits = 1
            self.instrument.serial.timeout  = 0.2   # seconds
            self.instrument.address = 1    # this is the slave address number
            self.instrument.mode = minimalmodbus.MODE_RTU   # rtu or ascii mode
            self.instrument.debug = False

            if (self.instrument.serial.is_open == False):
                self.instrument.serial.open()

            self.ui.statusbar.showMessage("Connected.")
            print str(self.instrument) + '\n\n'
        except:
            print "Connection failed."
            self.ui.statusbar.showMessage("Connection failed.")

                                      
    def disconnect(self):        
        try:
            self.instrument.serial.close()
            print "Disconnected."
            self.ui.statusbar.showMessage("Disconnected.") 
        except:
            print "Disconnect failed."
            self.ui.statusbar.showMessage("Disconnect failed.")

        
    def emergency_stop(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 1             
            self.instrument.write_register(Holding_Registers.Map.Soft_Reset, 1, numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchA OK  # "
        except:
            status_msg += "WinchA NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 2             
            self.instrument.write_register(Holding_Registers.Map.Soft_Reset, 1, numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchB OK  # "
        except:
            status_msg += "WinchB NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 3             
            self.instrument.write_register(Holding_Registers.Map.Soft_Reset, 1, numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchC OK  # "
        except:
            status_msg += "WinchC NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 4             
            self.instrument.write_register(Holding_Registers.Map.Soft_Reset, 1, numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchD OK  # "
        except:
            status_msg += "WinchD NOK * "

        self.ui.statusbar.showMessage(status_msg)    
		
    def WinchA_Extrude(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        try:
            self.instrument.address = 1             
            self.instrument.write_register(Holding_Registers.Map.Target_Setpoint_Offset, int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchA OK  # "
        except:
            status_msg += "WinchA NOK * "

        self.ui.statusbar.showMessage(status_msg)

    def WinchB_Extrude(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        try:
            self.instrument.address = 2             
            self.instrument.write_register(Holding_Registers.Map.Target_Setpoint_Offset, int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchB OK  # "
        except:
            status_msg += "WinchB NOK * "

        self.ui.statusbar.showMessage(status_msg)
		
    def WinchC_Extrude(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        try:
            self.instrument.address = 3             
            self.instrument.write_register(Holding_Registers.Map.Target_Setpoint_Offset, int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchC OK  # "
        except:
            status_msg += "WinchC NOK * "

        self.ui.statusbar.showMessage(status_msg)

    def WinchD_Extrude(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        try:
            self.instrument.address = 4             
            self.instrument.write_register(Holding_Registers.Map.Target_Setpoint_Offset, int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchD OK  # "
        except:
            status_msg += "WinchD NOK * "

        self.ui.statusbar.showMessage(status_msg)
		
    def WinchA_Retract(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        try:
            self.instrument.address = 1             
            self.instrument.write_register(Holding_Registers.Map.Target_Setpoint_Offset, -1*int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchA OK  # "
        except:
            status_msg += "WinchA NOK * "

        self.ui.statusbar.showMessage(status_msg)

    def WinchB_Retract(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        try:
            self.instrument.address = 2             
            self.instrument.write_register(Holding_Registers.Map.Target_Setpoint_Offset, -1*int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchB OK  # "
        except:
            status_msg += "WinchB NOK * "

        self.ui.statusbar.showMessage(status_msg)
		
    def WinchC_Retract(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        try:
            self.instrument.address = 3             
            self.instrument.write_register(Holding_Registers.Map.Target_Setpoint_Offset, -1*int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchC OK  # "
        except:
            status_msg += "WinchC NOK * "

        self.ui.statusbar.showMessage(status_msg)

    def WinchD_Retract(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        try:
            self.instrument.address = 4             
            self.instrument.write_register(Holding_Registers.Map.Target_Setpoint_Offset, -1*int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchD OK  # "
        except:
            status_msg += "WinchD NOK * "

        self.ui.statusbar.showMessage(status_msg)
		
    def WinchA_Zero(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        try:
            self.instrument.address = 1             
            self.instrument.write_register(Holding_Registers.Map.Current_Encoder_Count, 0, numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchA OK  # "
        except:
            status_msg += "WinchA NOK * "

        self.ui.statusbar.showMessage(status_msg)	

    def WinchB_Zero(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        try:
            self.instrument.address = 2             
            self.instrument.write_register(Holding_Registers.Map.Current_Encoder_Count, 0, numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchB OK  # "
        except:
            status_msg += "WinchB NOK * "

        self.ui.statusbar.showMessage(status_msg)
		
    def WinchC_Zero(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        try:
            self.instrument.address = 3             
            self.instrument.write_register(Holding_Registers.Map.Current_Encoder_Count, 0, numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchC OK  # "
        except:
            status_msg += "WinchC NOK * "

        self.ui.statusbar.showMessage(status_msg)	

    def WinchD_Zero(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        try:
            self.instrument.address = 4             
            self.instrument.write_register(Holding_Registers.Map.Current_Encoder_Count, 0, numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchD OK  # "
        except:
            status_msg += "WinchD NOK * "

        self.ui.statusbar.showMessage(status_msg)	
		
    def WinchA_Goto(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        try:
            self.instrument.address = 1             
            self.instrument.write_register(Holding_Registers.Map.Target_Setpoint, int(self.ui.lineEdit_13.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchA OK  # "
        except:
            status_msg += "WinchA NOK * "

        self.ui.statusbar.showMessage(status_msg)

    def WinchB_Goto(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        try:
            self.instrument.address = 2             
            self.instrument.write_register(Holding_Registers.Map.Target_Setpoint, int(self.ui.lineEdit_14.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchB OK  # "
        except:
            status_msg += "WinchB NOK * "

        self.ui.statusbar.showMessage(status_msg)
		
    def WinchC_Goto(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        try:
            self.instrument.address = 3             
            self.instrument.write_register(Holding_Registers.Map.Target_Setpoint, int(self.ui.lineEdit_15.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchC OK  # "
        except:
            status_msg += "WinchC NOK * "

        self.ui.statusbar.showMessage(status_msg)

    def WinchD_Goto(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        try:
            self.instrument.address = 4             
            self.instrument.write_register(Holding_Registers.Map.Target_Setpoint, int(self.ui.lineEdit_16.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchD OK  # "
        except:
            status_msg += "WinchD NOK * "

        self.ui.statusbar.showMessage(status_msg)
		
    def WinchA_Reset(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        try:
            self.instrument.address = 1             
            self.instrument.write_register(Holding_Registers.Map.Soft_Reset, 1, numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchA OK  # "
        except:
            status_msg += "WinchA NOK * "

        self.ui.statusbar.showMessage(status_msg)	

    def WinchB_Reset(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        try:
            self.instrument.address = 2             
            self.instrument.write_register(Holding_Registers.Map.Soft_Reset, 1, numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchB OK  # "
        except:
            status_msg += "WinchB NOK * "

        self.ui.statusbar.showMessage(status_msg)
		
    def WinchC_Reset(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        try:
            self.instrument.address = 3             
            self.instrument.write_register(Holding_Registers.Map.Soft_Reset, 1, numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchC OK  # "
        except:
            status_msg += "WinchC NOK * "

        self.ui.statusbar.showMessage(status_msg)

    def WinchD_Reset(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        try:
            self.instrument.address = 4             
            self.instrument.write_register(Holding_Registers.Map.Soft_Reset, 1, numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchD OK  # "
        except:
            status_msg += "WinchD NOK * "

        self.ui.statusbar.showMessage(status_msg)
		
    def HomeAll_Length(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 1             
            self.instrument.write_register(Holding_Registers.Map.Current_Encoder_Count, int(self.ui.lineEdit_6.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchA OK  # "
        except:
            status_msg += "WinchA NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 2             
            self.instrument.write_register(Holding_Registers.Map.Current_Encoder_Count, int(self.ui.lineEdit_8.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchB OK  # "
        except:
            status_msg += "WinchB NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 3             
            self.instrument.write_register(Holding_Registers.Map.Current_Encoder_Count, int(self.ui.lineEdit_7.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchC OK  # "
        except:
            status_msg += "WinchC NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 4             
            self.instrument.write_register(Holding_Registers.Map.Current_Encoder_Count, int(self.ui.lineEdit_9.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchD OK  # "
        except:
            status_msg += "WinchD NOK * "

        self.ui.statusbar.showMessage(status_msg)

    def HomeAll_Coordinate(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 1             
            self.instrument.write_registers(Holding_Registers.Map.Current_X, [int(self.ui.lineEdit_79.text()), int(self.ui.lineEdit_4.text()), int(self.ui.lineEdit_5.text())])
            status_msg += "WinchA OK  # "
        except:
            status_msg += "WinchA NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 2             
            self.instrument.write_registers(Holding_Registers.Map.Current_X, [int(self.ui.lineEdit_79.text()), int(self.ui.lineEdit_4.text()), int(self.ui.lineEdit_5.text())])
            status_msg += "WinchB OK  # "
        except:
            status_msg += "WinchB NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 3             
            self.instrument.write_registers(Holding_Registers.Map.Current_X, [int(self.ui.lineEdit_79.text()), int(self.ui.lineEdit_4.text()), int(self.ui.lineEdit_5.text())])
            status_msg += "WinchC OK  # "
        except:
            status_msg += "WinchC NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 4             
            self.instrument.write_registers(Holding_Registers.Map.Current_X, [int(self.ui.lineEdit_79.text()), int(self.ui.lineEdit_4.text()), int(self.ui.lineEdit_5.text())])
            status_msg += "WinchD OK  # "
        except:
            status_msg += "WinchD NOK * "

        self.ui.statusbar.showMessage(status_msg)
		
    def Waypoint_Goto(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 1             
            self.instrument.write_registers(Holding_Registers.Map.Target_X, [int(self.ui.lineEdit_11.text()), int(self.ui.lineEdit_10.text()), int(self.ui.lineEdit_12.text())])
            status_msg += "WinchA OK  # "
        except:
            status_msg += "WinchA NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 2             
            self.instrument.write_registers(Holding_Registers.Map.Target_X, [int(self.ui.lineEdit_11.text()), int(self.ui.lineEdit_10.text()), int(self.ui.lineEdit_12.text())])
            status_msg += "WinchB OK  # "
        except:
            status_msg += "WinchB NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 3             
            self.instrument.write_registers(Holding_Registers.Map.Target_X, [int(self.ui.lineEdit_11.text()), int(self.ui.lineEdit_10.text()), int(self.ui.lineEdit_12.text())])
            status_msg += "WinchC OK  # "
        except:
            status_msg += "WinchC NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 4             
            self.instrument.write_registers(Holding_Registers.Map.Target_X, [int(self.ui.lineEdit_11.text()), int(self.ui.lineEdit_10.text()), int(self.ui.lineEdit_12.text())])
            status_msg += "WinchD OK  # "
        except:
            status_msg += "WinchD NOK * "

        self.ui.statusbar.showMessage(status_msg)

    def X_Plus(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 1             
            self.instrument.write_register(Holding_Registers.Map.Target_X_Offset, int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchA OK  # "
        except:
            status_msg += "WinchA NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 2             
            self.instrument.write_register(Holding_Registers.Map.Target_X_Offset, int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchB OK  # "
        except:
            status_msg += "WinchB NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 3             
            self.instrument.write_register(Holding_Registers.Map.Target_X_Offset, int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchC OK  # "
        except:
            status_msg += "WinchC NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 4             
            self.instrument.write_register(Holding_Registers.Map.Target_X_Offset, int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchD OK  # "
        except:
            status_msg += "WinchD NOK * "

        self.ui.statusbar.showMessage(status_msg)
		
    def Y_Plus(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 1             
            self.instrument.write_register(Holding_Registers.Map.Target_Y_Offset, int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchA OK  # "
        except:
            status_msg += "WinchA NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 2             
            self.instrument.write_register(Holding_Registers.Map.Target_Y_Offset, int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchB OK  # "
        except:
            status_msg += "WinchB NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 3             
            self.instrument.write_register(Holding_Registers.Map.Target_Y_Offset, int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchC OK  # "
        except:
            status_msg += "WinchC NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 4             
            self.instrument.write_register(Holding_Registers.Map.Target_Y_Offset, int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchD OK  # "
        except:
            status_msg += "WinchD NOK * "

        self.ui.statusbar.showMessage(status_msg)	

    def Z_Plus(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 1             
            self.instrument.write_register(Holding_Registers.Map.Target_Z_Offset, int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchA OK  # "
        except:
            status_msg += "WinchA NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 2             
            self.instrument.write_register(Holding_Registers.Map.Target_Z_Offset, int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchB OK  # "
        except:
            status_msg += "WinchB NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 3             
            self.instrument.write_register(Holding_Registers.Map.Target_Z_Offset, int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchC OK  # "
        except:
            status_msg += "WinchC NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 4             
            self.instrument.write_register(Holding_Registers.Map.Target_Z_Offset, int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchD OK  # "
        except:
            status_msg += "WinchD NOK * "

        self.ui.statusbar.showMessage(status_msg)
		
    def X_Minus(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 1             
            self.instrument.write_register(Holding_Registers.Map.Target_X_Offset, -1*int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchA OK  # "
        except:
            status_msg += "WinchA NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 2             
            self.instrument.write_register(Holding_Registers.Map.Target_X_Offset, -1*int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchB OK  # "
        except:
            status_msg += "WinchB NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 3             
            self.instrument.write_register(Holding_Registers.Map.Target_X_Offset, -1*int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchC OK  # "
        except:
            status_msg += "WinchC NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 4             
            self.instrument.write_register(Holding_Registers.Map.Target_X_Offset, -1*int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchD OK  # "
        except:
            status_msg += "WinchD NOK * "

        self.ui.statusbar.showMessage(status_msg)
		
    def Y_Minus(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 1             
            self.instrument.write_register(Holding_Registers.Map.Target_Y_Offset, -1*int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchA OK  # "
        except:
            status_msg += "WinchA NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 2             
            self.instrument.write_register(Holding_Registers.Map.Target_Y_Offset, -1*int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchB OK  # "
        except:
            status_msg += "WinchB NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 3             
            self.instrument.write_register(Holding_Registers.Map.Target_Y_Offset, -1*int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchC OK  # "
        except:
            status_msg += "WinchC NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 4             
            self.instrument.write_register(Holding_Registers.Map.Target_Y_Offset, -1*int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchD OK  # "
        except:
            status_msg += "WinchD NOK * "

        self.ui.statusbar.showMessage(status_msg)	

    def Z_Minus(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 1             
            self.instrument.write_register(Holding_Registers.Map.Target_Z_Offset, -1*int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchA OK  # "
        except:
            status_msg += "WinchA NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 2             
            self.instrument.write_register(Holding_Registers.Map.Target_Z_Offset, -1*int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchB OK  # "
        except:
            status_msg += "WinchB NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 3             
            self.instrument.write_register(Holding_Registers.Map.Target_Z_Offset, -1*int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchC OK  # "
        except:
            status_msg += "WinchC NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 4             
            self.instrument.write_register(Holding_Registers.Map.Target_Z_Offset, -1*int(self.ui.lineEdit_2.text()), numberOfDecimals=0, functioncode=16, signed=True)
            status_msg += "WinchD OK  # "
        except:
            status_msg += "WinchD NOK * "

        self.ui.statusbar.showMessage(status_msg)

    def WinchA_Write_PID(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        try:
            self.instrument.address = 1             
            self.instrument.write_registers(Holding_Registers.Map.Kp, [int(self.ui.lineEdit_17.text()), int(self.ui.lineEdit_18.text()), int(self.ui.lineEdit_19.text())])
            status_msg += "WinchA OK  # "
        except:
            status_msg += "WinchA NOK * "

        self.ui.statusbar.showMessage(status_msg)	

    def WinchB_Write_PID(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        try:
            self.instrument.address = 2        
            self.instrument.write_registers(Holding_Registers.Map.Kp, [int(self.ui.lineEdit_48.text()), int(self.ui.lineEdit_58.text()), int(self.ui.lineEdit_59.text())])
            status_msg += "WinchB OK  # "
        except:
            status_msg += "WinchB NOK * "

        self.ui.statusbar.showMessage(status_msg)	
		
    def WinchC_Write_PID(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        try:
            self.instrument.address = 3        
            self.instrument.write_registers(Holding_Registers.Map.Kp, [int(self.ui.lineEdit_66.text()), int(self.ui.lineEdit_67.text()), int(self.ui.lineEdit_68.text())])
            status_msg += "WinchC OK  # "
        except:
            status_msg += "WinchC NOK * "

        self.ui.statusbar.showMessage(status_msg)	

    def WinchD_Write_PID(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        try:
            self.instrument.address = 4        
            self.instrument.write_registers(Holding_Registers.Map.Kp, [int(self.ui.lineEdit_69.text()), int(self.ui.lineEdit_70.text()), int(self.ui.lineEdit_71.text())])
            status_msg += "WinchD OK  # "
        except:
            status_msg += "WinchD NOK * "

        self.ui.statusbar.showMessage(status_msg)	
		
    def Write_Field_Settings(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 1             
            self.instrument.write_registers(Holding_Registers.Map.Field_Length, [int(self.ui.lineEdit_72.text()), int(self.ui.lineEdit_73.text())])
            status_msg += "WinchA OK  # "
        except:
            status_msg += "WinchA NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 2             
            self.instrument.write_registers(Holding_Registers.Map.Field_Length, [int(self.ui.lineEdit_72.text()), int(self.ui.lineEdit_73.text())])
            status_msg += "WinchB OK  # "
        except:
            status_msg += "WinchB NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 3             
            self.instrument.write_registers(Holding_Registers.Map.Field_Length, [int(self.ui.lineEdit_72.text()), int(self.ui.lineEdit_73.text())])
            status_msg += "WinchC OK  # "
        except:
            status_msg += "WinchC NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 4             
            self.instrument.write_registers(Holding_Registers.Map.Field_Length, [int(self.ui.lineEdit_72.text()), int(self.ui.lineEdit_73.text())])
            status_msg += "WinchD OK  # "
        except:
            status_msg += "WinchD NOK * "

        self.ui.statusbar.showMessage(status_msg)

    def Write_Motion_Settings(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 1             
            self.instrument.write_registers(Holding_Registers.Map.Max_Velocity, [int(self.ui.lineEdit_74.text()), int(self.ui.lineEdit_75.text())])
            status_msg += "WinchA OK  # "
        except:
            status_msg += "WinchA NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 2             
            self.instrument.write_registers(Holding_Registers.Map.Max_Velocity, [int(self.ui.lineEdit_74.text()), int(self.ui.lineEdit_75.text())])
            status_msg += "WinchB OK  # "
        except:
            status_msg += "WinchB NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 3             
            self.instrument.write_registers(Holding_Registers.Map.Max_Velocity, [int(self.ui.lineEdit_74.text()), int(self.ui.lineEdit_75.text())])
            status_msg += "WinchC OK  # "
        except:
            status_msg += "WinchC NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 4             
            self.instrument.write_registers(Holding_Registers.Map.Max_Velocity, [int(self.ui.lineEdit_74.text()), int(self.ui.lineEdit_75.text())])
            status_msg += "WinchD OK  # "
        except:
            status_msg += "WinchD NOK * "

        self.ui.statusbar.showMessage(status_msg)           
    	
    def Read_Target_Length(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 1             
            self.ui.lineEdit_23.setText(str(self.instrument.read_register(Holding_Registers.Map.Target_Setpoint)))
            status_msg += "WinchA OK  # "
        except:
            status_msg += "WinchA NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 2             
            self.ui.lineEdit_22.setText(str(self.instrument.read_register(Holding_Registers.Map.Target_Setpoint)))
            status_msg += "WinchB OK  # "
        except:
            status_msg += "WinchB NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 3             
            self.ui.lineEdit_21.setText(str(self.instrument.read_register(Holding_Registers.Map.Target_Setpoint)))
            status_msg += "WinchC OK  # "
        except:
            status_msg += "WinchC NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 4             
            self.ui.lineEdit_3.setText(str(self.instrument.read_register(Holding_Registers.Map.Target_Setpoint)))
            status_msg += "WinchD OK  # "
        except:
            status_msg += "WinchD NOK * "

        self.ui.statusbar.showMessage(status_msg)  

    def Read_Target_Coordinate(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 1             
            self.ui.lineEdit_24.setText(str(self.instrument.read_registers(Holding_Registers.Map.Target_X, 3)))
            status_msg += "WinchA OK  # "
        except:
            status_msg += "WinchA NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 2             
            self.ui.lineEdit_25.setText(str(self.instrument.read_registers(Holding_Registers.Map.Target_X, 3)))
            status_msg += "WinchB OK  # "
        except:
            status_msg += "WinchB NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 3             
            self.ui.lineEdit_26.setText(str(self.instrument.read_registers(Holding_Registers.Map.Target_X, 3)))
            status_msg += "WinchC OK  # "
        except:
            status_msg += "WinchC NOK * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 4             
            self.ui.lineEdit_36.setText(str(self.instrument.read_registers(Holding_Registers.Map.Target_X, 3)))
            status_msg += "WinchD OK  # "
        except:
            status_msg += "WinchD NOK * "

        self.ui.statusbar.showMessage(status_msg)  
		
    def WinchA_ReadMonitor1(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 1             
            data_recv = self.instrument.read_registers(Holding_Registers.Map.Current_Encoder_Count, 3)
            self.ui.lineEdit_76.setText(str(data_recv[0]))
            self.ui.lineEdit_77.setText(str(data_recv[1]))
            self.ui.lineEdit_78.setText(str(data_recv[2]))
            status_msg += "WinchA OK  # "
        except:
            status_msg += "WinchA NOK * "

        self.ui.statusbar.showMessage(status_msg)	

    def WinchB_ReadMonitor1(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 2             
            data_recv = self.instrument.read_registers(Holding_Registers.Map.Current_Encoder_Count, 3)
            self.ui.lineEdit_76.setText(str(data_recv[0]))
            self.ui.lineEdit_77.setText(str(data_recv[1]))
            self.ui.lineEdit_78.setText(str(data_recv[2]))
            status_msg += "WinchB OK  # "
        except:
            status_msg += "WinchB NOK * "

        self.ui.statusbar.showMessage(status_msg)	
		
    def WinchC_ReadMonitor1(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 3             
            data_recv = self.instrument.read_registers(Holding_Registers.Map.Current_Encoder_Count, 3)
            self.ui.lineEdit_76.setText(str(data_recv[0]))
            self.ui.lineEdit_77.setText(str(data_recv[1]))
            self.ui.lineEdit_78.setText(str(data_recv[2]))
            status_msg += "WinchC OK  # "
        except:
            status_msg += "WinchC NOK * "

        self.ui.statusbar.showMessage(status_msg)	

    def WinchD_ReadMonitor1(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 4            
            data_recv = self.instrument.read_registers(Holding_Registers.Map.Current_Encoder_Count, 3)
            self.ui.lineEdit_76.setText(str(data_recv[0]))
            self.ui.lineEdit_77.setText(str(data_recv[1]))
            self.ui.lineEdit_78.setText(str(data_recv[2]))
            status_msg += "WinchD OK  # "
        except:
            status_msg += "WinchD NOK * "

        self.ui.statusbar.showMessage(status_msg)	
		
    def WinchA_Read_PID(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 1             
            data_recv = self.instrument.read_registers(Holding_Registers.Map.Kp, 3)
            self.ui.lineEdit_17.setText(str(data_recv[0]))
            self.ui.lineEdit_18.setText(str(data_recv[1]))
            self.ui.lineEdit_19.setText(str(data_recv[2]))
            status_msg += "WinchA OK  # "
        except:
            status_msg += "WinchA NOK * "

        self.ui.statusbar.showMessage(status_msg)

    def WinchB_Read_PID(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 2             
            data_recv = self.instrument.read_registers(Holding_Registers.Map.Kp, 3)
            self.ui.lineEdit_48.setText(str(data_recv[0]))
            self.ui.lineEdit_58.setText(str(data_recv[1]))
            self.ui.lineEdit_59.setText(str(data_recv[2]))
            status_msg += "WinchB OK  # "
        except:
            status_msg += "WinchB NOK * "

        self.ui.statusbar.showMessage(status_msg)
		
    def WinchC_Read_PID(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 3             
            data_recv = self.instrument.read_registers(Holding_Registers.Map.Kp, 3)
            self.ui.lineEdit_66.setText(str(data_recv[0]))
            self.ui.lineEdit_67.setText(str(data_recv[1]))
            self.ui.lineEdit_68.setText(str(data_recv[2]))
            status_msg += "WinchC OK  # "
        except:
            status_msg += "WinchC NOK * "

        self.ui.statusbar.showMessage(status_msg)

    def WinchD_Read_PID(self):
        status_msg = ""
        try:
            if (self.instrument.serial.is_open == True): 
                status_msg = "Connected    # "
            else:
                status_msg = "Disconnected * "
        except:
            status_msg = "Disconnected * "

        self.ui.statusbar.showMessage(status_msg)

        try:
            self.instrument.address = 4             
            data_recv = self.instrument.read_registers(Holding_Registers.Map.Kp, 3)
            self.ui.lineEdit_69.setText(str(data_recv[0]))
            self.ui.lineEdit_70.setText(str(data_recv[1]))
            self.ui.lineEdit_71.setText(str(data_recv[2]))
            status_msg += "WinchD OK  # "
        except:
            status_msg += "WinchD NOK * "

        self.ui.statusbar.showMessage(status_msg)
		
		
if __name__ == "__main__":
    import sys
    app = QtGui.QApplication(sys.argv)
    MainWindow = StartQT4()
    MainWindow.show()
    sys.exit(app.exec_())